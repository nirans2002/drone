# Autogenerated param section. Do not hand edit.
param {
group.0 {
name=Dynamically Reconfigurable Parameters
desc=See the [[dynamic_reconfigure]] package for details on dynamically reconfigurable parameters.
0.name= ~enabled
0.default= True
0.type= bool
0.desc=if detection enabled 
1.name= ~length
1.default= 0
1.type= double
1.desc=markers' side length Range: 0.0 to 10.0
2.name= ~adaptiveThreshConstant
2.default= 7.0
2.type= double
2.desc=Constant for adaptive thresholding before finding contours Range: 0.0 to 100.0
3.name= ~adaptiveThreshWinSizeMin
3.default= 3
3.type= int
3.desc=Minimum window size for adaptive thresholding before finding contours Range: 1 to 100
4.name= ~adaptiveThreshWinSizeMax
4.default= 23
4.type= int
4.desc=Maximum window size for adaptive thresholding before finding contours Range: 1 to 100
5.name= ~adaptiveThreshWinSizeStep
5.default= 10
5.type= int
5.desc=Increments from adaptiveThreshWinSizeMin to adaptiveThreshWinSizeMax during the thresholding Range: 1 to 100
6.name= ~cornerRefinementMaxIterations
6.default= 30
6.type= int
6.desc=Maximum number of iterations for stop criteria of the corner refinement process Range: 1 to 1000
7.name= ~cornerRefinementMethod
7.default= 0
7.type= int
7.desc=Corner refinement method Possible values are: CORNER_REFINE_NONE (0): No refinement, CORNER_REFINE_SUBPIX (1): Do subpixel refinement, CORNER_REFINE_CONTOUR (2): Use contour-Points, CORNER_REFINE_APRILTAG (3): Use the AprilTag2 approach
8.name= ~cornerRefinementMinAccuracy
8.default= 0.1
8.type= double
8.desc=Minimum error for the stop criteria of the corner refinement process Range: 0.0 to 1.0
9.name= ~cornerRefinementWinSize
9.default= 5
9.type= int
9.desc=Window size for the corner refinement process (in pixels) Range: 1 to 100
10.name= ~detectInvertedMarker
10.default= False
10.type= bool
10.desc=check if there is a white marker. In order to generate a 'white' marker just invert a normal marker by using a tilde 
11.name= ~errorCorrectionRate
11.default= 0.6
11.type= double
11.desc=Error correction rate respect to the maximum error correction capability for each dictionary Range: 0.0 to 1.0
12.name= ~minCornerDistanceRate
12.default= 0.05
12.type= double
12.desc=Minimum distance between corners for detected markers relative to its perimeter Range: 0.0 to 0.25
13.name= ~markerBorderBits
13.default= 1
13.type= int
13.desc=Number of bits of the marker border, i.e. marker border width Range: 1 to 10
14.name= ~maxErroneousBitsInBorderRate
14.default= 0.35
14.type= double
14.desc=Maximum number of accepted erroneous bits in the border (i.e. number of allowed white bits in the border) Range: 0.0 to 1.0
15.name= ~minDistanceToBorder
15.default= 3
15.type= int
15.desc=Minimum distance of any corner to the image border for detected markers (in pixels) Range: 0 to 1000
16.name= ~minMarkerDistanceRate
16.default= 0.05
16.type= double
16.desc=minimum mean distance beetween two marker corners to be considered similar, so that the smaller one is removed. The rate is relative to the smaller perimeter of the two markers Range: 0.0 to 1.0
17.name= ~minMarkerPerimeterRate
17.default= 0.03
17.type= double
17.desc=Determine minimum perimeter for marker contour to be detected. This is defined as a rate respect to the maximum dimension of the input image Range: 0.0 to 4.0
18.name= ~maxMarkerPerimeterRate
18.default= 4.0
18.type= double
18.desc=Determine maximum perimeter for marker contour to be detected. This is defined as a rate respect to the maximum dimension of the input image Range: 0.0 to 4.0
19.name= ~minOtsuStdDev
19.default= 5.0
19.type= double
19.desc=Minimun standard deviation in pixels values during the decodification step to apply Otsu thresholding (otherwise, all the bits are set to 0 or 1 depending on mean higher than 128 or not) Range: 0.0 to 100.0
20.name= ~perspectiveRemoveIgnoredMarginPerCell
20.default= 0.13
20.type= double
20.desc=Width of the margin of pixels on each cell not considered for the determination of the cell bit. Represents the rate respect to the total size of the cell, i.e. perpectiveRemovePixelPerCell Range: 0.0 to 1.0
21.name= ~perspectiveRemovePixelPerCell
21.default= 4
21.type= int
21.desc=Number of bits (per dimension) for each cell of the marker when removing the perspective Range: 1 to 100
22.name= ~polygonalApproxAccuracyRate
22.default= 0.03
22.type= double
22.desc=Minimum accuracy during the polygonal approximation process to determine which contours are squares Range: 0.0 to 1.0
23.name= ~aprilTagQuadDecimate
23.default= 0.0
23.type= double
23.desc=Detection of quads can be done on a lower-resolution image, improving speed at a cost of pose accuracy and a slight decrease in detection rate. Decoding the binary payload is still done at full resolution Range: 0.0 to 1000.0
24.name= ~aprilTagQuadSigma
24.default= 0.0
24.type= double
24.desc=What Gaussian blur should be applied to the segmented image (used for quad detection?) Parameter is the standard deviation in pixels. Very noisy images benefit from non-zero values Range: 0.0 to 1000.0
}
}
# End of autogenerated section. You may edit below.

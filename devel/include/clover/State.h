// Generated by gencpp from file clover/State.msg
// DO NOT EDIT!


#ifndef CLOVER_MESSAGE_STATE_H
#define CLOVER_MESSAGE_STATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace clover
{
template <class ContainerAllocator>
struct State_
{
  typedef State_<ContainerAllocator> Type;

  State_()
    : mode(0)
    , yaw_mode(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , speed(0.0)
    , lat(0.0)
    , lon(0.0)
    , vx(0.0)
    , vy(0.0)
    , vz(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , roll_rate(0.0)
    , pitch_rate(0.0)
    , yaw_rate(0.0)
    , thrust(0.0)
    , xy_frame_id()
    , z_frame_id()
    , yaw_frame_id()  {
    }
  State_(const ContainerAllocator& _alloc)
    : mode(0)
    , yaw_mode(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , speed(0.0)
    , lat(0.0)
    , lon(0.0)
    , vx(0.0)
    , vy(0.0)
    , vz(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , roll_rate(0.0)
    , pitch_rate(0.0)
    , yaw_rate(0.0)
    , thrust(0.0)
    , xy_frame_id(_alloc)
    , z_frame_id(_alloc)
    , yaw_frame_id(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef uint8_t _yaw_mode_type;
  _yaw_mode_type yaw_mode;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;

   typedef float _speed_type;
  _speed_type speed;

   typedef float _lat_type;
  _lat_type lat;

   typedef float _lon_type;
  _lon_type lon;

   typedef float _vx_type;
  _vx_type vx;

   typedef float _vy_type;
  _vy_type vy;

   typedef float _vz_type;
  _vz_type vz;

   typedef float _roll_type;
  _roll_type roll;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _roll_rate_type;
  _roll_rate_type roll_rate;

   typedef float _pitch_rate_type;
  _pitch_rate_type pitch_rate;

   typedef float _yaw_rate_type;
  _yaw_rate_type yaw_rate;

   typedef float _thrust_type;
  _thrust_type thrust;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _xy_frame_id_type;
  _xy_frame_id_type xy_frame_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _z_frame_id_type;
  _z_frame_id_type z_frame_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _yaw_frame_id_type;
  _yaw_frame_id_type yaw_frame_id;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(MODE_NONE)
  #undef MODE_NONE
#endif
#if defined(_WIN32) && defined(MODE_NAVIGATE)
  #undef MODE_NAVIGATE
#endif
#if defined(_WIN32) && defined(MODE_NAVIGATE_GLOBAL)
  #undef MODE_NAVIGATE_GLOBAL
#endif
#if defined(_WIN32) && defined(MODE_POSITION)
  #undef MODE_POSITION
#endif
#if defined(_WIN32) && defined(MODE_VELOCITY)
  #undef MODE_VELOCITY
#endif
#if defined(_WIN32) && defined(MODE_ATTITUDE)
  #undef MODE_ATTITUDE
#endif
#if defined(_WIN32) && defined(MODE_RATES)
  #undef MODE_RATES
#endif
#if defined(_WIN32) && defined(YAW_MODE_YAW)
  #undef YAW_MODE_YAW
#endif
#if defined(_WIN32) && defined(YAW_MODE_YAW_RATE)
  #undef YAW_MODE_YAW_RATE
#endif
#if defined(_WIN32) && defined(YAW_MODE_YAW_TOWARDS)
  #undef YAW_MODE_YAW_TOWARDS
#endif

  enum {
    MODE_NONE = 0u,
    MODE_NAVIGATE = 1u,
    MODE_NAVIGATE_GLOBAL = 2u,
    MODE_POSITION = 3u,
    MODE_VELOCITY = 4u,
    MODE_ATTITUDE = 5u,
    MODE_RATES = 6u,
    YAW_MODE_YAW = 0u,
    YAW_MODE_YAW_RATE = 1u,
    YAW_MODE_YAW_TOWARDS = 2u,
  };


  typedef boost::shared_ptr< ::clover::State_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::clover::State_<ContainerAllocator> const> ConstPtr;

}; // struct State_

typedef ::clover::State_<std::allocator<void> > State;

typedef boost::shared_ptr< ::clover::State > StatePtr;
typedef boost::shared_ptr< ::clover::State const> StateConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::clover::State_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::clover::State_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::clover::State_<ContainerAllocator1> & lhs, const ::clover::State_<ContainerAllocator2> & rhs)
{
  return lhs.mode == rhs.mode &&
    lhs.yaw_mode == rhs.yaw_mode &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.speed == rhs.speed &&
    lhs.lat == rhs.lat &&
    lhs.lon == rhs.lon &&
    lhs.vx == rhs.vx &&
    lhs.vy == rhs.vy &&
    lhs.vz == rhs.vz &&
    lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.yaw == rhs.yaw &&
    lhs.roll_rate == rhs.roll_rate &&
    lhs.pitch_rate == rhs.pitch_rate &&
    lhs.yaw_rate == rhs.yaw_rate &&
    lhs.thrust == rhs.thrust &&
    lhs.xy_frame_id == rhs.xy_frame_id &&
    lhs.z_frame_id == rhs.z_frame_id &&
    lhs.yaw_frame_id == rhs.yaw_frame_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::clover::State_<ContainerAllocator1> & lhs, const ::clover::State_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace clover

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::clover::State_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::clover::State_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::clover::State_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::clover::State_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::clover::State_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::clover::State_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::clover::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d9e0ec21a3e363877a9dee3df8999bd1";
  }

  static const char* value(const ::clover::State_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd9e0ec21a3e36387ULL;
  static const uint64_t static_value2 = 0x7a9dee3df8999bd1ULL;
};

template<class ContainerAllocator>
struct DataType< ::clover::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "clover/State";
  }

  static const char* value(const ::clover::State_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::clover::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 MODE_NONE = 0\n"
"uint8 MODE_NAVIGATE = 1\n"
"uint8 MODE_NAVIGATE_GLOBAL = 2\n"
"uint8 MODE_POSITION = 3\n"
"uint8 MODE_VELOCITY = 4\n"
"uint8 MODE_ATTITUDE = 5\n"
"uint8 MODE_RATES = 6\n"
"\n"
"uint8 YAW_MODE_YAW = 0\n"
"uint8 YAW_MODE_YAW_RATE = 1\n"
"uint8 YAW_MODE_YAW_TOWARDS = 2\n"
"\n"
"# type of offboard control\n"
"uint8 mode\n"
"uint8 yaw_mode\n"
"\n"
"# targets\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"float32 speed\n"
"float32 lat\n"
"float32 lon\n"
"float32 vx\n"
"float32 vy\n"
"float32 vz\n"
"float32 roll\n"
"float32 pitch\n"
"float32 yaw\n"
"float32 roll_rate\n"
"float32 pitch_rate\n"
"float32 yaw_rate\n"
"float32 thrust\n"
"\n"
"# frames of reference\n"
"string xy_frame_id\n"
"string z_frame_id\n"
"string yaw_frame_id\n"
;
  }

  static const char* value(const ::clover::State_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::clover::State_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
      stream.next(m.yaw_mode);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.speed);
      stream.next(m.lat);
      stream.next(m.lon);
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.vz);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.roll_rate);
      stream.next(m.pitch_rate);
      stream.next(m.yaw_rate);
      stream.next(m.thrust);
      stream.next(m.xy_frame_id);
      stream.next(m.z_frame_id);
      stream.next(m.yaw_frame_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct State_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::clover::State_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::clover::State_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "yaw_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.yaw_mode);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "lat: ";
    Printer<float>::stream(s, indent + "  ", v.lat);
    s << indent << "lon: ";
    Printer<float>::stream(s, indent + "  ", v.lon);
    s << indent << "vx: ";
    Printer<float>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<float>::stream(s, indent + "  ", v.vy);
    s << indent << "vz: ";
    Printer<float>::stream(s, indent + "  ", v.vz);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "roll_rate: ";
    Printer<float>::stream(s, indent + "  ", v.roll_rate);
    s << indent << "pitch_rate: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_rate);
    s << indent << "yaw_rate: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_rate);
    s << indent << "thrust: ";
    Printer<float>::stream(s, indent + "  ", v.thrust);
    s << indent << "xy_frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.xy_frame_id);
    s << indent << "z_frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.z_frame_id);
    s << indent << "yaw_frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.yaw_frame_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CLOVER_MESSAGE_STATE_H

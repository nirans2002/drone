// Generated by gencpp from file clover/SetYawRequest.msg
// DO NOT EDIT!


#ifndef CLOVER_MESSAGE_SETYAWREQUEST_H
#define CLOVER_MESSAGE_SETYAWREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace clover
{
template <class ContainerAllocator>
struct SetYawRequest_
{
  typedef SetYawRequest_<ContainerAllocator> Type;

  SetYawRequest_()
    : yaw(0.0)
    , frame_id()  {
    }
  SetYawRequest_(const ContainerAllocator& _alloc)
    : yaw(0.0)
    , frame_id(_alloc)  {
  (void)_alloc;
    }



   typedef float _yaw_type;
  _yaw_type yaw;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _frame_id_type;
  _frame_id_type frame_id;





  typedef boost::shared_ptr< ::clover::SetYawRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::clover::SetYawRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetYawRequest_

typedef ::clover::SetYawRequest_<std::allocator<void> > SetYawRequest;

typedef boost::shared_ptr< ::clover::SetYawRequest > SetYawRequestPtr;
typedef boost::shared_ptr< ::clover::SetYawRequest const> SetYawRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::clover::SetYawRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::clover::SetYawRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::clover::SetYawRequest_<ContainerAllocator1> & lhs, const ::clover::SetYawRequest_<ContainerAllocator2> & rhs)
{
  return lhs.yaw == rhs.yaw &&
    lhs.frame_id == rhs.frame_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::clover::SetYawRequest_<ContainerAllocator1> & lhs, const ::clover::SetYawRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace clover

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::clover::SetYawRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::clover::SetYawRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::clover::SetYawRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::clover::SetYawRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::clover::SetYawRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::clover::SetYawRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::clover::SetYawRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "33e4540e3159a04fe00974073e47ecc8";
  }

  static const char* value(const ::clover::SetYawRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x33e4540e3159a04fULL;
  static const uint64_t static_value2 = 0xe00974073e47ecc8ULL;
};

template<class ContainerAllocator>
struct DataType< ::clover::SetYawRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "clover/SetYawRequest";
  }

  static const char* value(const ::clover::SetYawRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::clover::SetYawRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 yaw\n"
"string frame_id\n"
;
  }

  static const char* value(const ::clover::SetYawRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::clover::SetYawRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.yaw);
      stream.next(m.frame_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetYawRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::clover::SetYawRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::clover::SetYawRequest_<ContainerAllocator>& v)
  {
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.frame_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CLOVER_MESSAGE_SETYAWREQUEST_H

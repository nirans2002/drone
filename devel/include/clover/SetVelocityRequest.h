// Generated by gencpp from file clover/SetVelocityRequest.msg
// DO NOT EDIT!


#ifndef CLOVER_MESSAGE_SETVELOCITYREQUEST_H
#define CLOVER_MESSAGE_SETVELOCITYREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace clover
{
template <class ContainerAllocator>
struct SetVelocityRequest_
{
  typedef SetVelocityRequest_<ContainerAllocator> Type;

  SetVelocityRequest_()
    : vx(0.0)
    , vy(0.0)
    , vz(0.0)
    , yaw(0.0)
    , frame_id()
    , auto_arm(false)  {
    }
  SetVelocityRequest_(const ContainerAllocator& _alloc)
    : vx(0.0)
    , vy(0.0)
    , vz(0.0)
    , yaw(0.0)
    , frame_id(_alloc)
    , auto_arm(false)  {
  (void)_alloc;
    }



   typedef float _vx_type;
  _vx_type vx;

   typedef float _vy_type;
  _vy_type vy;

   typedef float _vz_type;
  _vz_type vz;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _frame_id_type;
  _frame_id_type frame_id;

   typedef uint8_t _auto_arm_type;
  _auto_arm_type auto_arm;





  typedef boost::shared_ptr< ::clover::SetVelocityRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::clover::SetVelocityRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetVelocityRequest_

typedef ::clover::SetVelocityRequest_<std::allocator<void> > SetVelocityRequest;

typedef boost::shared_ptr< ::clover::SetVelocityRequest > SetVelocityRequestPtr;
typedef boost::shared_ptr< ::clover::SetVelocityRequest const> SetVelocityRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::clover::SetVelocityRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::clover::SetVelocityRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::clover::SetVelocityRequest_<ContainerAllocator1> & lhs, const ::clover::SetVelocityRequest_<ContainerAllocator2> & rhs)
{
  return lhs.vx == rhs.vx &&
    lhs.vy == rhs.vy &&
    lhs.vz == rhs.vz &&
    lhs.yaw == rhs.yaw &&
    lhs.frame_id == rhs.frame_id &&
    lhs.auto_arm == rhs.auto_arm;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::clover::SetVelocityRequest_<ContainerAllocator1> & lhs, const ::clover::SetVelocityRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace clover

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::clover::SetVelocityRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::clover::SetVelocityRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::clover::SetVelocityRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::clover::SetVelocityRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::clover::SetVelocityRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::clover::SetVelocityRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::clover::SetVelocityRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8ea61e7777ea4ef3c67628bf994b1a22";
  }

  static const char* value(const ::clover::SetVelocityRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8ea61e7777ea4ef3ULL;
  static const uint64_t static_value2 = 0xc67628bf994b1a22ULL;
};

template<class ContainerAllocator>
struct DataType< ::clover::SetVelocityRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "clover/SetVelocityRequest";
  }

  static const char* value(const ::clover::SetVelocityRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::clover::SetVelocityRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 vx\n"
"float32 vy\n"
"float32 vz\n"
"float32 yaw\n"
"string frame_id\n"
"bool auto_arm\n"
;
  }

  static const char* value(const ::clover::SetVelocityRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::clover::SetVelocityRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.vz);
      stream.next(m.yaw);
      stream.next(m.frame_id);
      stream.next(m.auto_arm);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetVelocityRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::clover::SetVelocityRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::clover::SetVelocityRequest_<ContainerAllocator>& v)
  {
    s << indent << "vx: ";
    Printer<float>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<float>::stream(s, indent + "  ", v.vy);
    s << indent << "vz: ";
    Printer<float>::stream(s, indent + "  ", v.vz);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.frame_id);
    s << indent << "auto_arm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.auto_arm);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CLOVER_MESSAGE_SETVELOCITYREQUEST_H
